import React from 'react';
import { styled } from 'styled-components';

import generateThemeItem from '../../HelperFunctions/designFunctions/generateThemeItem';
import { IGenerateThemeItem } from '../../HelperFunctions/designFunctions/generateThemeItem';
import FancySVGAtom from '../../Atoms/FancySVGAtom/FancySVGAtom';
import Typography from '../../Atoms/Typography/Typography';
import { disabledStyle } from '../../HelperFunctions/designFunctions/disableStyle';
import { TUiColorsType } from '../../Design/color/designColor';
import { borderRadius } from '../../Design/design';
import { TLayer } from '../../Design/color/generateColorSteps';

// the style is generated by the generateThemeItem function
const A = styled.a<IGenerateThemeItem & { disabled?: boolean }>`
  ${(props: IGenerateThemeItem) => generateThemeItem(props)}
  ${({ disabled }) => (disabled ? disabledStyle : '')}
`;

// --------------------------------------------------------------------------- //
// --------------- The Main Component for the Fancy A Tag -------------------- //
// --------------------------------------------------------------------------- //
export interface IFancyA {
  size?: 'sm' | 'md' | 'lg';
  wide?: boolean;
  themeType?: keyof TUiColorsType;
  layer?: TLayer;
  align?: 'left' | 'right' | 'center';
  textColor?: Exclude<keyof TUiColorsType, 'transparent'>;
  hoverColor?: Exclude<keyof TUiColorsType, 'transparent'>;
  label?: string;
  outlined?: boolean;
  icon?: JSX.Element;
  disabled?: boolean;
  borderRadius?: keyof typeof borderRadius;
  onClick?: () => void;
}
export default function FancyA(props: IFancyA) {
  const {
    icon,
    label,
    outlined,
    size,
    themeType = 'secondary',
    align,
    textColor,
    wide,
    hoverColor,
    disabled,
    onClick,
    borderRadius,
    layer,
  } = {
    ...defaultProps,
    ...props,
  };

  return (
    <A
      $size={size!}
      $themeType={themeType}
      $align={align}
      $textColor={textColor}
      $wide={wide}
      $borderRadius={borderRadius}
      $icon={icon}
      $hoverColor={hoverColor}
      $label={label}
      $outlined={outlined}
      disabled={disabled}
      onClick={onClick}
      $layer={layer}
    >
      {icon && (
        <FancySVGAtom size={size} isPassive externalStyle={{ flexShrink: '0' }}>
          {icon}
        </FancySVGAtom>
      )}
      {label && (
        <Typography type="inlineElement" variant="label">
          {label}
        </Typography>
      )}
    </A>
  );
}

const defaultProps: IFancyA = {
  size: 'md',
  themeType: 'transparent',
  align: 'left',
  hoverColor: 'accent',
  outlined: false,
  disabled: false,
  layer: 0,
};
